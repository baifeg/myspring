<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
           http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd
           ">
	<aop:config></aop:config>

	<bean
		class="org.springframework.context.annotation.CommonAnnotationBeanPostProcessor" />

	<!-- 
	<bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="org.h2.Driver" />
		<property name="url" value="jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;INIT=CREATE SCHEMA IF NOT EXISTS testdb"></property>
		<property name="username" value="sa" />
  		<property name="password" value="" />
		<property name="minIdle" value="5" />
		<property name="maxIdle" value="30" />
	</bean>
	 
	<jdbc:initialize-database data-source="dataSource" ignore-failures="DROPS">
		<jdbc:script location="classpath:1.sql" />
	</jdbc:initialize-database>
	-->
	<jdbc:embedded-database id="dataSource" type="H2">
        <jdbc:script location="classpath:1.sql"/>
    </jdbc:embedded-database>
    
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 注意：我用的是Annotation的方式配置的Hibernate，这里的property的name是annotatedClasses -->
		<property name="annotatedClasses">
			<list>
				<value>com.baifeg.models.entity.Company</value>
				<value>com.baifeg.models.entity.User</value>
			</list>
		</property>
		<property name="hibernateProperties">
			<props>
				<!-- 设置Hibernate方言 -->
				<prop key="hibernate.dialect">org.hibernate.dialect.H2Dialect</prop>
				<!-- 是否打印sql -->
				<prop key="hibernate.show_sql">true</prop>
				<!-- 格式化sql -->
				<prop key="hibernate.format_sql">true</prop>
				<!-- 是否自动更新表 -->
				<prop key="hibernate.hbm2ddl.auto">update</prop>
				<prop key="hibernate.current_session_context_class">thread</prop>
				<!-- 最大抓取深度，如果为0，则关闭默认的外连接抓取。建议值为0-3 -->
				<prop key="hibernate.max_fetch_depth">1</prop>
				<!-- 用于生成有助于调试的注释信息，默认为关闭 -->
				<prop key="hibernate.use_sql_comments">true</prop>
			</props>
		</property>
	</bean>

	<bean id="transactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>

	<aop:config>
		<aop:pointcut id="txMethod"
			expression="execution(* com.baifeg.models.dao.*Dao.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txMethod" />
	</aop:config>
	<!-- AOP切面声明事务管理 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED" /> <!-- 支持当前事务，如果执行到save开头的任何方法时没有事务则开启一个事务 这是最常见的方式 -->
			<tx:method name="update*" propagation="REQUIRED" /><!-- 支持当前事务，如果执行到save开头的任何方法时没有事务则开启一个事务 
				这是最常见的方式 -->
			<tx:method name="add*" propagation="REQUIRED" /><!-- 支持当前事务，如果执行到save开头的任何方法时没有事务则开启一个事务 
				这是最常见的方式 -->
			<tx:method name="delete*" propagation="REQUIRED" /><!-- 支持当前事务，如果执行到save开头的任何方法时没有事务则开启一个事务 
				这是最常见的方式 -->
			<tx:method name="find*" propagation="SUPPORTS" read-only="true" /> <!-- 支持当前事务，如果当前没有事务，就以非事务方式执行。只读 -->
			<tx:method name="get*" propagation="SUPPORTS" read-only="true" /><!-- 
				支持当前事务，如果当前没有事务，就以非事务方式执行。只读 -->
			<tx:method name="*" />
		</tx:attributes>
	</tx:advice>

</beans>